crimenids <- dbReadTable(con, "criminalidad") #utilisateurs is a table from my database called extraction
preciovivienda <- dbReadTable(con, "preciovivienda") #utilisateurs is a table from my database called extraction
tiempo <- dbReadTable(con, "tiempo") #utilisateurs is a table from my database called extraction
comunidad <- dbReadTable(con, "comunidad") #utilisateurs is a table from my database called extraction
#Numero de parados a nivel nacional
sqlParados <- "SELECT
turismo.NumParados AS numParados,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN `comunidad` ON `turismo`.`ID Comunidad` = `comunidad`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `comunidad`.`NombreComunidad` != \"Otras Comunidades Aut?nomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY `tiempo`.`ID Mes`,`comunidad`.`NombreComunidad` ASC;"
sqlIPC <- "SELECT
`turismo`.`ID Mes`,
tiempo.Mes,
tiempo.Anio,
IPC.Indice,
comunidad.NombreComunidad
FROM
turismo
JOIN ipcids ON `ipcids`.`idHecho` = `turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND IPC.GrupoECOICOP = '?ndice general' AND `comunidad`.`NombreComunidad` != \"Otras Comunidades Autónomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC;"
sqlPrecioVivienda = "SELECT
`preciovivienda`.`Indice` AS IndicePrecioViv,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `preciovivienda`.`TipoVivienda` = 'General' AND `comunidad`.`NombreComunidad` != \"Otras Comunidades Autónomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC;"
sqlDeudaPublica <- "SELECT
turismo.deudaPubPIB AS deudaPubPIB,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `comunidad`.`NombreComunidad` != \"Otras Comunidades Autónomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC"
paradosBD <- dbGetQuery(con, sqlParados)
#turistasBD <- dbGetQuery(con, sqlTuristas)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
ipcPrePred <- ipcBD[-c(2602:length(ipcBD[,1])),]
paradosPrePred <- paradosBD[-c(2602:length(paradosBD[,1])),]
deudaPubPrePred <-deudaPubBD[-c(2602:length(deudaPubBD[,1])),]
precioPrePred <- precioViviendaBD[-c(2602:length(precioViviendaBD[,1])),]
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
vectorDeudaPub <- unlist(deudaPubPrePred$deudaPubPIB, use.names = FALSE)
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
vectorComunidades <- unlist(paradosPrePred$NombreComunidad, use.names = FALSE)
factorComunidades <- factor(vectorComunidades)
matriz <- cbind(vectorIPC, vectorParados, vectorDeudaPub, vectorPrecioViv, factorComunidades)
#Calculamos el numero de intervalos
k = nclass.Sturges(vectorParados)
k = 5
#Calculamos la amplitud
A = diff(range(vectorParados))/k
A = ceiling(A)
#Calculamos el elemento minimo para poner los intervalos
m = min(vectorParados)
L = m - 0.05 + A * (0:k)
L
marcas = (L[0:k] + L[1:k+1])/2
marcas
etiq = c("grado 1", "grado 2", "grado 3","grado 4","grado 5")
corte = cut(vectorParados, breaks=L, labels=etiq, right=FALSE)
corte
library("rpart")
library("rpart.plot")
library("rpart.plot")
library("rpart.plot")
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados)
serieTemp <- ts(matriz, start = c(2005, 5), frequency = 12)
serieTemp
cor(serieTemp)
set.seed(1)
ind <- sample(2, nrow(matriz), replace=TRUE, prob=c(0.9, 0.1))
head(ind, 10)
# [1] 1 1 1 1 2 1 1 1 1 1
trainData <- matriz[ind==1,] ; dim(trainData)
# [1] 112 5
testData <- matriz[ind==2,] ; dim(testData)
dataframeGrados = data.frame(vectorIPC, corte, vectorDeudaPub, vectorPrecioViv, factorComunidades)
corte = cut(vectorParados, breaks=L, labels=etiq, right=FALSE)
#Calculamos el numero de intervalos
k = nclass.Sturges(vectorParados)
k = 5
#Calculamos la amplitud
A = diff(range(vectorParados))/k
A = ceiling(A)
#Calculamos el elemento minimo para poner los intervalos
m = min(vectorParados)
L = m - 0.05 + A * (0:k)
L
vectorParados
#Libera memoria
rm(list=ls())
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
#Carga de las tablas de la Base de Datos
turismo <- dbReadTable(con, "turismo")
ipc <- dbReadTable(con, "ipc")
ipcids <- dbReadTable(con, "ipcids")
criminalidad <- dbReadTable(con, "criminalidad")
crimenids <- dbReadTable(con, "criminalidad")
preciovivienda <- dbReadTable(con, "preciovivienda")
tiempo <- dbReadTable(con, "tiempo")
comunidad <- dbReadTable(con, "comunidad")
#Ordenar la tabla de turismo por ID Mes (Ordenarla cronologicamente)
turismo2 <- turismo[order(turismo$ID.Mes),]
year <- rep(2016:2019, each=12);
quarter <- rep(1:12, 4)
#Grafica con la Evolución del Turismo
plot(turismo$NumTurista, xaxt="n", ylab="Id Mes", xlab="Turismo")
plot(turismo2$ID.Mes,turismo2$NumTurista,  ylab="Turismo", xlab="")
axis(1, labels=turismo2$ID.Mes, at=1:364, las=2)
#Agregar la tabla de turismo por Mes, sumando el turismo de las distintas comunidades
aggregate(turismo2 ~ ID.Mes, turismo2[turismo2$ID.Mes,], sum)
turismo3 <- aggregate(turismo2, turismo2["ID.Mes"], sum)
#Pruebas para graficar el turismo....
plot(turismo3$ID.Mes,turismo3$NumTurista,  ylab="Turismo", xlab="", type="s")
lines(lowess(turismo3$NumTurista))
plot(turismo3$NumTurista, xaxt="n",  ylab="Turismo", xlab="")
axis(1, labels=paste(year, quarter, sep="M"), at=1:12, las=3)
#Pruebas para agregar
turismo4 <- aggregate(turismo2 ~ ID.Mes , turismo2["ID.Mes"], sum)
numTur <- turismo3$NumTurista
rstTurismo <- merge(turismo2, tiempo, by.x = "ID.Mes", by.y = "ID.Mes")
turismo4 <- aggregate(rstTurismo, rstTurismo["ID.Mes"], sum)
#---------------------------------Segunda parte de la 1º iteración----------------------------------
#---------------------Prueba de un modelo de regresión del turismo a partir del tiempo--------------
#---------------------------------------------------------------------------------------------------
install.packages("data.table", dependencies = TRUE)
library(data.table)
t <- setDT(rstTurismo)[, .(Mes=mean(Mes), Anio=mean(Anio), NumTurista=sum(NumTurista)), by=ID.Mes]
#Prueba del modelo con meses y años
pred <- lm(t$NumTurista ~ t$Mes + t$Anio)
pred
attributes(pred)
pred$coefficients
summary(pred)
layout(matrix(c(1,2,3,4),2,2)) # 4 gráficos por ventana
plot(pred)
layout(matrix(1)) # Restauración del valor inicial
#Prueba del modelo con solo los meses
pred <- lm(t$NumTurista ~ t$Mes)
pred
attributes(pred)
pred$coefficients
summary(pred)
hist(pred$residuals)
layout(matrix(c(1,2,3,4),2,2)) # 4 gráficos por ventana
plot(pred)
layout(matrix(1)) # Restauración del valor inicial
cor(t$NumTurista, t$Mes)
t2 <- t[-c(1:3, 49), ]
cor(t2$NumTurista, t2$Mes)
#-------------------------------3º Parte 1º Iteración---------------------------------
#--------Tras probar a agregar los resultados de readTable con funciones R -----------
#--------decicimos que realizar consultas SQL podría resultar más sencillo------------
#-------------pero no nos dio tiempo a indagar mucho más en ellas---------------------
#---Consultas de prueba
#SELECT SUM(`turismo`.`NumTurista`) as turismoMensual FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `turismo`.`ID Comunidad`
#SELECT `ID Mes`, tiempo.Mes, tiempo.Anio, `ID Comunidad`, `NumTurista` FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes`
#SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2005 GROUP BY `tiempo`.`ID Mes`;"
#Numero de turistas a nivel nacional
sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT `turismo`.`ID Mes`, tiempo.Mes, tiempo.Anio, ipc.Indice
FROM turismo
JOIN ipcids ON `ipcids`.`idHecho`=`turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2005 AND ipc.GrupoECOICOP='Índice general'
GROUP BY `tiempo`.`ID Mes` "
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
paradosBD <- dbGetQuery(con, sqlParados)
turistasBD <- dbGetQuery(con, sqlTuristas)
ipcBD <- dbGetQuery(con, sqlIPC)
cor(ipcBD$Indice, turistasBD$numTurista)
pred
#Carga de las tablas de la Base de Datos
turismo <- dbReadTable(con, "turismo")
ipc <- dbReadTable(con, "ipc")
ipcids <- dbReadTable(con, "ipcids")
criminalidad <- dbReadTable(con, "criminalidad")
crimenids <- dbReadTable(con, "criminalidad")
preciovivienda <- dbReadTable(con, "preciovivienda")
tiempo <- dbReadTable(con, "tiempo")
comunidad <- dbReadTable(con, "comunidad")
#Ordenar la tabla de turismo por ID Mes (Ordenarla cronologicamente)
turismo2 <- turismo[order(turismo$ID.Mes),]
year <- rep(2016:2019, each=12);
quarter <- rep(1:12, 4)
#Grafica con la Evolución del Turismo
plot(turismo$NumTurista, xaxt="n", ylab="Id Mes", xlab="Turismo")
plot(turismo2$ID.Mes,turismo2$NumTurista,  ylab="Turismo", xlab="")
axis(1, labels=turismo2$ID.Mes, at=1:364, las=2)
#Agregar la tabla de turismo por Mes, sumando el turismo de las distintas comunidades
aggregate(turismo2 ~ ID.Mes, turismo2[turismo2$ID.Mes,], sum)
turismo3 <- aggregate(turismo2, turismo2["ID.Mes"], sum)
#Agregar la tabla de turismo por Mes, sumando el turismo de las distintas comunidades
aggregate(turismo2 ~ ID.Mes, turismo2[turismo2$ID.Mes,], sum)
turismo3 <- aggregate(turismo2, turismo2["ID.Mes"], sum)
#Pruebas para graficar el turismo....
plot(turismo3$ID.Mes,turismo3$NumTurista,  ylab="Turismo", xlab="", type="s")
lines(lowess(turismo3$NumTurista))
plot(turismo3$NumTurista, xaxt="n",  ylab="Turismo", xlab="")
axis(1, labels=paste(year, quarter, sep="M"), at=1:12, las=3)
#Pruebas para agregar
turismo4 <- aggregate(turismo2 ~ ID.Mes , turismo2["ID.Mes"], sum)
numTur <- turismo3$NumTurista
rstTurismo <- merge(turismo2, tiempo, by.x = "ID.Mes", by.y = "ID.Mes")
turismo4 <- aggregate(rstTurismo, rstTurismo["ID.Mes"], sum)
t <- setDT(rstTurismo)[, .(Mes=mean(Mes), Anio=mean(Anio), NumTurista=sum(NumTurista)), by=ID.Mes]
#Prueba del modelo con meses y años
pred <- lm(t$NumTurista ~ t$Mes + t$Anio)
cor(t2$NumTurista, t2$Mes)
t <- setDT(rstTurismo)[, .(Mes=mean(Mes), Anio=mean(Anio), NumTurista=sum(NumTurista)), by=ID.Mes]
t
Grafica con la Evolución del Turismo
plot(turismo$NumTurista, xaxt="n", ylab="Id Mes", xlab="Turismo")
plot(turismo2$ID.Mes,turismo2$NumTurista,  ylab="Turismo", xlab="")
axis(1, labels=turismo2$ID.Mes, at=1:364, las=2)
aggregate(turismo2 ~ ID.Mes, turismo2[turismo2$ID.Mes,], sum)
turismo2 <- turismo[order(turismo$ID.Mes),]
aggregate(turismo2 ~ ID.Mes, turismo2[turismo2$ID.Mes,], sum)
turismo3 <- aggregate(turismo2, turismo2["ID.Mes"], sum)
#Pruebas para agregar
turismo4 <- aggregate(turismo2 ~ ID.Mes , turismo2["ID.Mes"], sum)
turismo4 <- aggregate(turismo2["ID.Mes"], sum)
turismo2
turismo4 <- aggregate(turismo2 ~ ID.Mes , turismo2, sum)
turismo4 <- aggregate(turismo2 ~ ID.Mes , by=list(turismo2$ID.Mes), sum)
help("aggregate")
turismo4 <- aggregate(turismo2 ~ ID.Mes , by=list(turismo2$ID.Mes), sum)
turismo4 <- aggregate(turismo2 ~ ID.Mes , by=list(turismo2$ID.Mes), sum)
turismo4 <- aggregate(turismo2 ~ ID.Mes , by=list(turismo2$ID.Mes), sum)
turismo4 <- aggregate(turismo2 ~ ID.Mes , by=list(turismo2$ID.Mes), sum)
turismo4 <- aggregate(turismo2 ~ ID.Mes , turismo2["ID.Mes"], sum)
turismo4 <- aggregate(turismo2 ~ ID.Mes , by=list(turismo2$ID.Mes), sum)
turismo4 <- aggregate(turismo2 ~ ID.Mes , by=list(turismo2$ID.Mes), sum())
turismo4 <- aggregate(turismo2$ID.Mes , by=list(turismo2$ID.Mes), sum())
turismo4 <- aggregate(turismo2$ID.Mes , by=list(turismo2$ID.Mes), sum)
turismo4
turismo3 <- aggregate(turismo2, turismo2["ID.Mes"], sum)
numTur <- turismo3$NumTurista
rstTurismo <- merge(turismo2, tiempo, by.x = "ID.Mes", by.y = "ID.Mes")
turismo4 <- aggregate(rstTurismo, rstTurismo["ID.Mes"], sum)
t <- setDT(rstTurismo)[, .(Mes=mean(Mes), Anio=mean(Anio), NumTurista=sum(NumTurista)), by=ID.Mes]
#Prueba del modelo con meses y años
pred <- lm(t$NumTurista ~ t$Mes + t$Anio)
t <- setDT(rstTurismo)[, .(Mes=mean(Mes), Anio=mean(Anio), NumTurista=sum(NumTurista)), by=ID.Mes]
pred <- lm(t$NumTurista ~ t$Mes + t$Anio)
t
rm(list=ls())
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
#
# Predicción de numero de parados a partir de IPC, DeudaPub y PrecioDeVivienda
#
#Preparamos las sentencias SQL
sqlPrecioVivienda = "SELECT AVG(`preciovivienda`.`Indice`) as IndicePrecioViv, tiempo.Mes, tiempo.Anio
FROM `turismo`
JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007  AND `preciovivienda`.`TipoVivienda`='General'
GROUP BY `tiempo`.`ID Mes`"
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`;"
#Numero de turistas a nivel nacional
sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT `turismo`.`ID Mes`, tiempo.Mes, tiempo.Anio, ipc.Indice
FROM turismo
JOIN ipcids ON `ipcids`.`idHecho`=`turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007 AND ipc.GrupoECOICOP='Índice general'
GROUP BY `tiempo`.`ID Mes` "
sqlDeudaPublica <- "SELECT AVG(turismo.deudaPubPIB) as deudaPubPIB, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`"
#Ejecutamos la consultas SQL
paradosBD <- dbGetQuery(con, sqlParados)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
#Filtrar los datos NA, se ha hecho de manera semiaumática como en la anterior iteración...
#También se han acortado los datos para que abarquen el mismo intervalo temporal
paradosPrePred <- paradosBD[-c(154:168),]
deudaPubPrePred <-deudaPubBD[-c(154:168),]
ipcPrePred <- ipcBD[-c(154:158),]
precioPrePred <- precioViviendaBD[-c(154:156),]
#----- UNIR DATA FRAMES CON SERIES TEMP------------------
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
vectorDeudaPub <- unlist(deudaPubPrePred$deudaPubPIB, use.names = FALSE)
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados, vectorDeudaPub, vectorPrecioViv)
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
#
#Preparamos las sentencias SQL
sqlPrecioVivienda = "SELECT AVG(`preciovivienda`.`Indice`) as IndicePrecioViv, tiempo.Mes, tiempo.Anio
FROM `turismo`
JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007  AND `preciovivienda`.`TipoVivienda`='General'
GROUP BY `tiempo`.`ID Mes`"
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`;"
#Numero de turistas a nivel nacional
sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT `turismo`.`ID Mes`, tiempo.Mes, tiempo.Anio, ipc.Indice
FROM turismo
JOIN ipcids ON `ipcids`.`idHecho`=`turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007 AND ipc.GrupoECOICOP='Índice general'
GROUP BY `tiempo`.`ID Mes` "
sqlDeudaPublica <- "SELECT AVG(turismo.deudaPubPIB) as deudaPubPIB, tiempo.Mes, tiempo.Anio FRO
#Ejecutamos la consultas SQL
paradosBD <- dbGetQuery(con, sqlParados)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
paradosPrePred <- paradosBD[-c(154:168),]
deudaPubPrePred <-deudaPubBD[-c(154:168),]
ipcPrePred <- ipcBD[-c(154:158),]
precioPrePred <- precioViviendaBD[-c(154:156),]
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
vectorDeudaPub <- unlist(deudaPubPrePred$deudaPubPIB, use.names = FALSE)
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados, vectorDeudaPub, vectorPrecioViv)
serieTemp <- ts(matriz, start = c(2007, 5), frequency = 12)
serieTemp
cor(serieTemp)
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
#
# Predicción de numero de parados a partir de IPC, DeudaPub y PrecioDeVivienda
#
#Preparamos las sentencias SQL
sqlPrecioVivienda = "SELECT AVG(`preciovivienda`.`Indice`) as IndicePrecioViv, tiempo.Mes, tiempo.Anio
FROM `turismo`
JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007  AND `preciovivienda`.`TipoVivienda`='General'
GROUP BY `tiempo`.`ID Mes`"
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`;"
#Numero de turistas a nivel nacional
sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT `turismo`.`ID Mes`, tiempo.Mes, tiempo.Anio, ipc.Indice
FROM turismo
JOIN ipcids ON `ipcids`.`idHecho`=`turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007 AND ipc.GrupoECOICOP='Índice general'
GROUP BY `tiempo`.`ID Mes` "
sqlDeudaPublica <- "SELECT AVG(turismo.deudaPubPIB) as deudaPubPIB, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`"
#Ejecutamos la consultas SQL
paradosBD <- dbGetQuery(con, sqlParados)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
#Filtrar los datos NA, se ha hecho de manera semiaumática como en la anterior iteración...
#También se han acortado los datos para que abarquen el mismo intervalo temporal
paradosPrePred <- paradosBD[-c(154:168),]
deudaPubPrePred <-deudaPubBD[-c(154:168),]
ipcPrePred <- ipcBD[-c(154:158),]
precioPrePred <- precioViviendaBD[-c(154:156),]
#----- UNIR DATA FRAMES CON SERIES TEMP------------------
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
vectorDeudaPub <- unlist(deudaPubPrePred$deudaPubPIB, use.names = FALSE)
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados, vectorDeudaPub, vectorPrecioViv)
serieTemp <- ts(matriz, start = c(2007, 5), frequency = 12)
serieTemp
cor(serieTemp)
#Semilla y division para entrenamiento
set.seed(1)
ind <- sample(2, nrow(matriz), replace=TRUE, prob=c(0.5, 0.5))
head(ind, 10)
trainData <- matriz[ind==1,] ; dim(trainData)
testData <- matriz[ind==2,] ; dim(testData)
#---------------MODELO DE REGRESIÓN CON LM-------------
cor(ipcPrePred$Indice, paradosPrePred$numParados)
cor(trainData[,1], trainData[,2])# 1 --> IPC, 2 --> Parados
ipcTrain <- trainData[,1]
paradTrain <- trainData[,2]
deudaTrain <- trainData[,3]
precioViviendaTrain <- trainData[,4]
length(ipcTrain)
length(paradTrain)
length(deudaTrain)
length(precioViviendaTrain)
pred <- lm(trainData[,2] ~ trainData[,1] + trainData[,3] + trainData[,4])
pred <- lm(paradTrain ~ ipcTrain + deudaTrain + precioViviendaTrain)
pred
attributes(pred)
pred$coefficients
summary(pred)
hist(pred$residuals)
boxplot(pred[['residuals']],main='Boxplot: Residuals',ylab='residual value')
#----Calculo del Error Cuadrático Medio Teórico de la Regresión
ECMaPriori <- sum((residuals(pred)^2))/length((residuals(pred)))
# Cálculo del error medio absoluto "teórico" o "a priori" de la regresión
EMAaPriori <- sqrt(ECMaPriori);
EMAaPriori
# Cálculo del error medio relativo (o porcentual) "teórico" o "a priori"  de la regresión
EMRaPriori <- EMAaPriori / mean(paradTrain); EMRaPriori
layout(matrix(c(1,2,3,4),2,2)) # 4 gráficos por ventana
plot(pred)
layout(matrix(1)) # Restauración del valor inicial
s3d <- scatterplot3d(trainData[,1], trainData[,3], trainData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la “estructura”.
s3d <- scatterplot3d(trainData[,1], trainData[,4], trainData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la “estructura”.
#-----------------------------Predicción------------------------------------------------------
#Tiene que tener el mismo nombre que los coeficientes del modelo generado por lm
new = data.frame("ipcTrain"=testData[,1] , "deudaTrain"=testData[,3] , "precioViviendaTrain"=testData[,4])
#Se repite el 1 (tipo de estilo) para los datos usados en entrenamiento y el 2 para los datos que se van a usar para la prediccion
style <- c(rep(1,length(paradTrain)), rep(2,length(testData[,1])))
layout(matrix(c(1,2),2,2)) # 2 gráficos por ventana
prediccion <- predict(pred, newdata = new)
prediccion
plot(c(paradTrain, prediccion), xaxt="n", ylab="Parados", xlab="", pch=style, col=style) #Predicción
plot(c(paradTrain, testData[,2]), xaxt="n", ylab="Parados", xlab="") #Datos Reales
#axis(1, at=1:16, las=3, labels=c(paste(year,quarter,sep="Q"), "2011Q1", "2011Q2", "2011Q3", "2011Q4"))
#--------------------------------------------------------------------------------------------------------
#----------------------------------Modelo con los datos de test------------------------------------------
#--------------------------------------------------------------------------------------------------------
ipcTrain <- testData[,1]
paradTrain <- testData[,2]
deudaTrain <- testData[,3]
precioViviendaTrain <- testData[,4]
length(ipcTrain)
length(paradTrain)
length(deudaTrain)
length(precioViviendaTrain)
pred <- lm(testData[,2] ~ testData[,1] + testData[,3] + testData[,4])
pred <- lm(paradTrain ~ ipcTrain + deudaTrain + precioViviendaTrain)
pred
attributes(pred)
pred$coefficients
summary(pred)
hist(pred$residuals)
boxplot(pred[['residuals']],main='Boxplot: Residuals',ylab='residual value')
#----Calculo del Error Cuadrático Medio Teórico de la Regresión
ECMaPrioriB <- sum((residuals(pred)^2))/length((residuals(pred)))
# Cálculo del error medio absoluto "teórico" o "a priori" de la regresión
EMAaPrioriB <- sqrt(ECMaPrioriB);
EMAaPrioriB
# Cálculo del error medio relativo (o porcentual) "teórico" o "a priori"  de la regresión
EMRaPrioriB <- EMAaPriori / mean(paradTrain); EMRaPrioriB
layout(matrix(c(1,2,3,4),2,2)) # 4 gráficos por ventana
plot(pred)
layout(matrix(1)) # Restauración del valor inicial
s3d <- scatterplot3d(testData[,1], testData[,3], testData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la “estructura”.
s3d <- scatterplot3d(testData[,1], testData[,4], testData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la “estructura”.
#-----------------------------Predicción------------------------------------------------------
#Tiene que tener el mismo nombre que los coeficientes del modelo generado por lm
new = data.frame("ipcTrain"=trainData[,1] , "deudaTrain"=trainData[,3] , "precioViviendaTrain"=trainData[,4])
#Se repite el 1 (tipo de estilo) para los datos usados en entrenamiento y el 2 para los datos que se van a usar para la prediccion
style <- c(rep(1,length(paradTrain)), rep(2,length(trainData[,1])))
layout(matrix(c(1,2),2,2)) # 2 gráficos por ventana
prediccion <- predict(pred, newdata = new)
prediccion
plot(c(paradTrain, prediccion), xaxt="n", ylab="Parados", xlab="", pch=style, col=style) #Predicción
plot(c(paradTrain, trainData[,2]), xaxt="n", ylab="Parados", xlab="") #Datos Reales
summary(pred)
hist(pred$residuals)
layout(matrix(1)) # Restauración del valor inicial
plot(c(paradTrain, prediccion), xaxt="n", ylab="Parados", xlab="", pch=style, col=style) #Predicción
plot(c(paradTrain, trainData[,2]), xaxt="n", ylab="Parados", xlab="") #Datos Reales
