require(scatterplot3d)
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
paradosBD <- dbGetQuery(con, sqlParados)
turistasBD <- dbGetQuery(con, sqlTuristas)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
sqlPrecioVivienda = "SELECT AVG(`preciovivienda`.`Indice`) as IndicePrecioViv, tiempo.Mes, tiempo.Anio
FROM `turismo`
JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007  AND `preciovivienda`.`TipoVivienda`='General'
GROUP BY `tiempo`.`ID Mes`"
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`;"
#Numero de turistas a nivel nacional
sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT `turismo`.`ID Mes`, tiempo.Mes, tiempo.Anio, ipc.Indice
FROM turismo
JOIN ipcids ON `ipcids`.`idHecho`=`turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007 AND ipc.GrupoECOICOP='Ãndice general'
GROUP BY `tiempo`.`ID Mes` "
sqlDeudaPublica <- "SELECT AVG(turismo.deudaPubPIB) as deudaPubPIB, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`"
#Ejecutamos la consultas SQL
paradosBD <- dbGetQuery(con, sqlParados)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
#Filtrar los datos NA, se ha hecho de manera semiaumÃ¡tica como en la anterior iteraciÃ³n...
#TambiÃ©n se han acortado los datos para que abarquen el mismo intervalo temporal
paradosPrePred <- paradosBD[-c(154:168),]
deudaPubPrePred <-deudaPubBD[-c(154:168),]
ipcPrePred <- ipcBD[-c(154:158),]
precioPrePred <- precioViviendaBD[-c(154:156),]
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
vectorDeudaPub <- unlist(deudaPubPrePred$deudaPubPIB, use.names = FALSE)
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados, vectorDeudaPub, vectorPrecioViv)
serieTemp <- ts(matriz, start = c(2007, 5), frequency = 12)
serieTemp
cor(serieTemp)
set.seed(1)
ind <- sample(2, nrow(matriz), replace=TRUE, prob=c(0.9, 0.1))
head(ind, 10)
# [1] 1 1 1 1 2 1 1 1 1 1
trainData <- matriz[ind==1,] ; dim(trainData)
# [1] 112 5
testData <- matriz[ind==2,] ; dim(testData)
cor(ipcPrePred$Indice, paradosPrePred$numParados)
cor(trainData[,1], trainData[,2])# 1 --> IPC, 2 --> Parados
ipcTrain <- trainData[,1]
paradTrain <- trainData[,2]
deudaTrain <- trainData[,3]
precioViviendaTrain <- trainData[,4]
length(ipcTrain)
length(paradTrain)
length(deudaTrain)
length(precioViviendaTrain)
pred <- lm(trainData[,2] ~ trainData[,1] + trainData[,3] + trainData[,4])
pred <- lm(paradTrain ~ ipcTrain + deudaTrain + precioViviendaTrain)
precioViviendaTrain <- trainData[,4]
paradTrain <- trainData[,2]
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
sqlPrecioVivienda = "SELECT AVG(`preciovivienda`.`Indice`) as IndicePrecioViv, tiempo.Mes, tiempo.Anio
FROM `turismo`
JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007  AND `preciovivienda`.`TipoVivienda`='General'
GROUP BY `tiempo`.`ID Mes`"
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`;"
#Numero de turistas a nivel nacional
sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT `turismo`.`ID Mes`, tiempo.Mes, tiempo.Anio, ipc.Indice
FROM turismo
JOIN ipcids ON `ipcids`.`idHecho`=`turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007 AND ipc.GrupoECOICOP='Índice general'
GROUP BY `tiempo`.`ID Mes` "
sqlDeudaPublica <- "SELECT AVG(turismo.deudaPubPIB) as deudaPubPIB, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`"
#Ejecutamos la consultas SQL
paradosBD <- dbGetQuery(con, sqlParados)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
#Filtrar los datos NA, se ha hecho de manera semiaumÃ¡tica como en la anterior iteraciÃ³n...
#TambiÃ©n se han acortado los datos para que abarquen el mismo intervalo temporal
paradosPrePred <- paradosBD[-c(154:168),]
deudaPubPrePred <-deudaPubBD[-c(154:168),]
ipcPrePred <- ipcBD[-c(154:158),]
precioPrePred <- precioViviendaBD[-c(154:156),]
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
vectorDeudaPub <- unlist(deudaPubPrePred$deudaPubPIB, use.names = FALSE)
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados, vectorDeudaPub, vectorPrecioViv)
serieTemp <- ts(matriz, start = c(2007, 5), frequency = 12)
serieTemp
cor(serieTemp)
set.seed(1)
ind <- sample(2, nrow(matriz), replace=TRUE, prob=c(0.9, 0.1))
head(ind, 10)
# [1] 1 1 1 1 2 1 1 1 1 1
trainData <- matriz[ind==1,] ; dim(trainData)
# [1] 112 5
testData <- matriz[ind==2,] ; dim(testData)
cor(ipcPrePred$Indice, paradosPrePred$numParados)
cor(trainData[,1], trainData[,2])# 1 --> IPC, 2 --> Parados
ipcTrain <- trainData[,1]
paradTrain <- trainData[,2]
deudaTrain <- trainData[,3]
precioViviendaTrain <- trainData[,4]
length(ipcTrain)
length(paradTrain)
length(deudaTrain)
length(precioViviendaTrain)
pred <- lm(trainData[,2] ~ trainData[,1] + trainData[,3] + trainData[,4])
pred <- lm(paradTrain ~ ipcTrain + deudaTrain + precioViviendaTrain)
pred
attributes(pred)
pred$coefficients
summary(pred)
hist(pred$residuals)
boxplot(pred[['residuals']],main='Boxplot: Residuals',ylab='residual value')
layout(matrix(c(1,2,3,4),2,2)) # 4 grÃ¡ficos por ventana
plot(pred)
layout(matrix(1)) # RestauraciÃ³n del valor inicial
s3d <- scatterplot3d(trainData[,1], trainData[,3], trainData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la âestructuraâ.
#COMO SELECCIOANAR LAS VARIABLES CONCRETAS PARA LA PREDICCION
s3d$plane3d(pred) # Pinta los puntos del modelo sobre la estructura
s3d <- scatterplot3d(trainData[,1], trainData[,4], trainData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la âestructuraâ.
#Libera memoria
rm(list=ls())
require(RMySQL) #if already installed
require(scatterplot3d)
#Libera memoria
rm(list=ls())
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
sqlPrecioVivienda = "SELECT AVG(`preciovivienda`.`Indice`) as IndicePrecioViv, tiempo.Mes, tiempo.Anio
FROM `turismo`
JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007  AND `preciovivienda`.`TipoVivienda`='General'
GROUP BY `tiempo`.`ID Mes`"
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`;"
#Numero de parados a nivel nacional
sqlParados <- "SELECT SUM(turismo.NumParados) as numParados, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`;"
#Numero de turistas a nivel nacional
sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT `turismo`.`ID Mes`, tiempo.Mes, tiempo.Anio, ipc.Indice
FROM turismo
JOIN ipcids ON `ipcids`.`idHecho`=`turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE tiempo.Anio >= 2007 AND ipc.GrupoECOICOP='Índice general'
GROUP BY `tiempo`.`ID Mes` "
sqlDeudaPublica <- "SELECT AVG(turismo.deudaPubPIB) as deudaPubPIB, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` WHERE tiempo.Anio >= 2007 GROUP BY `tiempo`.`ID Mes`"
#Ejecutamos la consultas SQL
paradosBD <- dbGetQuery(con, sqlParados)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
#Filtrar los datos NA, se ha hecho de manera semiaumÃ¡tica como en la anterior iteraciÃ³n...
#TambiÃ©n se han acortado los datos para que abarquen el mismo intervalo temporal
paradosPrePred <- paradosBD[-c(154:168),]
deudaPubPrePred <-deudaPubBD[-c(154:168),]
ipcPrePred <- ipcBD[-c(154:158),]
precioPrePred <- precioViviendaBD[-c(154:156),]
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
vectorDeudaPub <- unlist(deudaPubPrePred$deudaPubPIB, use.names = FALSE)
vectorPrecioViv <-unlist(precioPrePred$IndicePrecioViv, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados, vectorDeudaPub, vectorPrecioViv)
serieTemp <- ts(matriz, start = c(2007, 5), frequency = 12)
serieTemp
cor(serieTemp)
set.seed(1)
ind <- sample(2, nrow(matriz), replace=TRUE, prob=c(0.9, 0.1))
head(ind, 10)
# [1] 1 1 1 1 2 1 1 1 1 1
trainData <- matriz[ind==1,] ; dim(trainData)
# [1] 112 5
testData <- matriz[ind==2,] ; dim(testData)
cor(ipcPrePred$Indice, paradosPrePred$numParados)
cor(trainData[,1], trainData[,2])# 1 --> IPC, 2 --> Parados
ipcTrain <- trainData[,1]
paradTrain <- trainData[,2]
deudaTrain <- trainData[,3]
precioViviendaTrain <- trainData[,4]
length(ipcTrain)
length(paradTrain)
length(deudaTrain)
length(precioViviendaTrain)
pred <- lm(trainData[,2] ~ trainData[,1] + trainData[,3] + trainData[,4])
pred <- lm(paradTrain ~ ipcTrain + deudaTrain + precioViviendaTrain)
pred
attributes(pred)
pred$coefficients
summary(pred)
hist(pred$residuals)
boxplot(pred[['residuals']],main='Boxplot: Residuals',ylab='residual value')
#----Calculo del Error CuadrÃ¡tico Medio TeÃ³rico de la RegresiÃ³n
ECMaPriori <- sum((residuals(pred)^2))/length((residuals(pred)))
# CÃ¡lculo del error medio absoluto "teÃ³rico" o "a priori" de la regresiÃ³n
EMAaPriori <- sqrt(ECMaPriori); EMAaPriori
# CÃ¡lculo del error medio relativo (o porcentual) "teÃ³rico" o "a priori"  de la regresiÃ³n
EMRaPriori <- EMAaPriori / mean(paradTrain); EMRaPriori
layout(matrix(c(1,2,3,4),2,2)) # 4 grÃ¡ficos por ventana
plot(pred)
layout(matrix(1)) # RestauraciÃ³n del valor inicial
s3d <- scatterplot3d(trainData[,1], trainData[,3], trainData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la âestructuraâ.
s3d <- scatterplot3d(trainData[,1], trainData[,4], trainData[,2], highlight.3d=T, type="h",
lab=c(2,3)) # Pinta la âestructuraâ.
#Tiene que tener el mismo nombre que los coeficientes del modelo generado por lm
new = data.frame("ipcTrain"=testData[,1] , "deudaTrain"=testData[,3] , "precioViviendaTrain"=testData[,4])
#Se repite el 1 (tipo de estilo) para los datos usados en entrenamiento y el 2 para los datos que se van a usar para la prediccion
style <- c(rep(1,length(paradTrain)), rep(2,length(testData[,1])))
prediccion <- predict(pred, newdata = new)
prediccion
plot(c(paradTrain, prediccion), xaxt="n", ylab="Parados", xlab="", pch=style, col=style) #PredicciÃ³n
plot(c(paradTrain, testData[,2]), xaxt="n", ylab="Parados", xlab="") #Datos Reales
#Se define un estilo para las ultimas 3 rangos de predicion(fir, lwr y upr) (es lo que genera la prediccion con el intervalo definido...)
style <- c(rep(1,length(paradTrain)), rep(2,length(testData[,1])), rep(3,length(testData[,1])), rep(4,length(testData[,1])))
prediccion <- predict(pred, newdata = new, interval='confidence')
prediccion
plot(c(paradTrain, prediccion), xaxt="n", ylab="Parados", xlab="", pch=style, col=style) #PredicciÃ³n
plot(c(paradTrain, testData[,2]), xaxt="n", ylab="Parados", xlab="") #Datos Reales
prediccion <- predict(pred, newdata = new, interval='prediction')
prediccion
plot(c(paradTrain, prediccion), xaxt="n", ylab="Parados", xlab="", pch=style, col=style) #PredicciÃ³n
plot(c(paradTrain, testData[,2]), xaxt="n", ylab="Parados", xlab="") #Datos Reales
#Libera memoria
rm(list=ls())
require(RMySQL) #if already installed
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
turismo <- dbReadTable(con, "turismo") #utilisateurs is a table from my database called extraction
ipc <- dbReadTable(con, "ipc") #utilisateurs is a table from my database called extraction
ipcids <- dbReadTable(con, "ipcids") #utilisateurs is a table from my database called extraction
criminalidad <- dbReadTable(con, "criminalidad") #utilisateurs is a table from my database called extraction
crimenids <- dbReadTable(con, "criminalidad") #utilisateurs is a table from my database called extraction
preciovivienda <- dbReadTable(con, "preciovivienda") #utilisateurs is a table from my database called extraction
tiempo <- dbReadTable(con, "tiempo") #utilisateurs is a table from my database called extraction
comunidad <- dbReadTable(con, "comunidad") #utilisateurs is a table from my database called extraction
#Numero de parados a nivel nacional
sqlParados <- "SELECT
turismo.NumParados AS numParados,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN `comunidad` ON `turismo`.`ID Comunidad` = `comunidad`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `comunidad`.`NombreComunidad` != \"Otras Comunidades Autónomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY `tiempo`.`ID Mes`,`comunidad`.`NombreComunidad` ASC;"
sqlIPC <- "SELECT
`turismo`.`ID Mes`,
tiempo.Mes,
tiempo.Anio,
IPC.Indice,
comunidad.NombreComunidad
FROM
turismo
JOIN ipcids ON `ipcids`.`idHecho` = `turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND IPC.GrupoECOICOP = 'Índice general' AND `comunidad`.`NombreComunidad` != \"Otras Comunidades AutÃ³nomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC;"
sqlPrecioVivienda = "SELECT
`preciovivienda`.`Indice` AS IndicePrecioViv,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `preciovivienda`.`TipoVivienda` = 'General' AND `comunidad`.`NombreComunidad` != \"Otras Comunidades AutÃ³nomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC;"
sqlDeudaPublica <- "SELECT
turismo.deudaPubPIB AS deudaPubPIB,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `comunidad`.`NombreComunidad` != \"Otras Comunidades AutÃ³nomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC"
paradosBD <- dbGetQuery(con, sqlParados)
#turistasBD <- dbGetQuery(con, sqlTuristas)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
ipcPrePred <- ipcBD[-c(2602:length(ipcBD[,1])),]
paradosPrePred <- paradosBD[-c(2602:length(paradosBD[,1])),]
deudaPubPrePred <-deudaPubBD[-c(2602:length(deudaPubBD[,1])),]
precioPrePred <- precioViviendaBD[-c(2602:length(precioViviendaBD[,1])),]
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
paradosPrePred
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
#Calculamos el numero de intervalos
k = nclass.FD(vectorParados)
k = 7
#Calculamos la amplitud
A = diff(range(vectorParados))/k
A = ceiling(A)
#Calculamos el elemento minimo para poner los intervalos
m = min(vectorParados)
L = m - 0.05 + A * (0:k)
L
marcas = (L[0:k] + L[1:k+1])/2
marcas
etiq = c("grado 1", "grado 2", "grado 3","grado 4","grado 5","grado 6","grado 7")
corte = cut(vectorParados, breaks=L, labels=marcas, right=FALSE)
corte
f_abs=as.vector(table(corte))
f_abs_acum=cumsum(table(corte))
f_rel=as.vector(prop.table(table(corte)))
f_rel_acum=cumsum(prop.table(table(corte)))
tabla_frec=data.frame(marcas, f_abs, f_abs_acum, f_rel, f_rel_acum)
tabla_frec
dataframeGrados = data.frame(vectorIPC, corte)
if (!is.installed("party")){
install.packages("party")
}
library(party)
myFormula <- corte ~ vectorIPC
arbol_clasif <- ctree(myFormula, dataframeGrados)
table(predict(arbol_clasif), corte)
plot(arbol_clasif)
print(arbol_clasif)
#Calculamos el numero de intervalos
k = 5
#Calculamos la amplitud
A = diff(range(vectorParados))/k
A = ceiling(A)
#Calculamos el elemento minimo para poner los intervalos
m = min(vectorParados)
require(RMySQL) #if already installed
#HAY QUE AMPLIAR EL TAMANIO DE ECOICOP A 100
#Libera memoria
rm(list=ls())
#Tabla de Hechos tiene que tener datos desde el 2010 aunque turismo este a null
#Al aÃ±adir todas la nuevas columnas de las tablas  hay que volver a separar las columnas de parados y deuda publica en otras tablas...
con <- dbConnect(RMySQL::MySQL(), host = "localhost",dbname="min",user = "root", password = "")
turismo <- dbReadTable(con, "turismo") #utilisateurs is a table from my database called extraction
ipc <- dbReadTable(con, "ipc") #utilisateurs is a table from my database called extraction
ipcids <- dbReadTable(con, "ipcids") #utilisateurs is a table from my database called extraction
criminalidad <- dbReadTable(con, "criminalidad") #utilisateurs is a table from my database called extraction
crimenids <- dbReadTable(con, "criminalidad") #utilisateurs is a table from my database called extraction
preciovivienda <- dbReadTable(con, "preciovivienda") #utilisateurs is a table from my database called extraction
tiempo <- dbReadTable(con, "tiempo") #utilisateurs is a table from my database called extraction
comunidad <- dbReadTable(con, "comunidad") #utilisateurs is a table from my database called extraction
#Numero de parados a nivel nacional
sqlParados <- "SELECT
turismo.NumParados AS numParados,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN `comunidad` ON `turismo`.`ID Comunidad` = `comunidad`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `comunidad`.`NombreComunidad` != \"Otras Comunidades Autónomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY `tiempo`.`ID Mes`,`comunidad`.`NombreComunidad` ASC;"
#Numero de turistas a nivel nacional
#sqlTuristas <- "SELECT SUM(turismo.NumTurista) as numTurista, tiempo.Mes, tiempo.Anio FROM `turismo` JOIN `tiempo` ON `turismo`.`ID Mes`=`tiempo`.`ID Mes` GROUP BY `tiempo`.`ID Mes`;"
sqlIPC <- "SELECT
`turismo`.`ID Mes`,
tiempo.Mes,
tiempo.Anio,
IPC.Indice,
comunidad.NombreComunidad
FROM
turismo
JOIN ipcids ON `ipcids`.`idHecho` = `turismo`.`ID IPC`
JOIN `ipc` ON `ipc`.`ID IPC` = `ipcids`.`idDatos`
JOIN tiempo ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND IPC.GrupoECOICOP = 'Índice general' AND `comunidad`.`NombreComunidad` != \"Otras Comunidades AutÃ³nomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC;"
sqlPrecioVivienda = "SELECT
`preciovivienda`.`Indice` AS IndicePrecioViv,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN preciovivienda ON `turismo`.`ID PrecioVivienda` = `preciovivienda`.`ID PrecioVivienda`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `preciovivienda`.`TipoVivienda` = 'General' AND `comunidad`.`NombreComunidad` != \"Otras Comunidades AutÃ³nomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC;"
sqlDeudaPublica <- "SELECT
turismo.deudaPubPIB AS deudaPubPIB,
tiempo.Mes,
tiempo.Anio,
comunidad.NombreComunidad
FROM
`turismo`
JOIN `tiempo` ON `turismo`.`ID Mes` = `tiempo`.`ID Mes`
JOIN comunidad ON `comunidad`.`ID Comunidad` = `turismo`.`ID Comunidad`
WHERE
tiempo.Anio >= 2007 AND `comunidad`.`NombreComunidad` != \"Otras Comunidades AutÃ³nomas\" AND `comunidad`.`NombreComunidad` != \"Melilla\" AND `comunidad`.`NombreComunidad` != \"Ceuta\"
ORDER BY
`tiempo`.`ID Mes`,
`comunidad`.`NombreComunidad` ASC"
paradosBD <- dbGetQuery(con, sqlParados)
#turistasBD <- dbGetQuery(con, sqlTuristas)
ipcBD <- dbGetQuery(con, sqlIPC)
deudaPubBD <- dbGetQuery(con, sqlDeudaPublica)
precioViviendaBD <- dbGetQuery(con, sqlPrecioVivienda)
#--------------------------------------------------------------------------
#----------------------PRUEBA de 2007 a 2019---------------------------
#--------------------------------------------------------------------------
#Filtrar los datos NA
ipcPrePred <- ipcBD[-c(2602:length(ipcBD[,1])),]
paradosPrePred <- paradosBD[-c(2602:length(paradosBD[,1])),]
deudaPubPrePred <-deudaPubBD[-c(2602:length(deudaPubBD[,1])),]
precioPrePred <- precioViviendaBD[-c(2602:length(precioViviendaBD[,1])),]
#Categorizamos paradosPrePred
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
paradosPrePred
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
#Calculamos el numero de intervalos
k = 5
#Calculamos la amplitud
A = diff(range(vectorParados))/k
A = ceiling(A)
#Calculamos el elemento minimo para poner los intervalos
m = min(vectorParados)
L = m - 0.05 + A * (0:k)
L
marcas = (L[0:k] + L[1:k+1])/2
marcas
etiq = c("grado 1", "grado 2", "grado 3","grado 4","grado 5")
corteCuantitativo = cut(vectorParados, breaks=L, labels=etiq, right=FALSE)
corteCuantitativo
###PRueba con Rpart
install.packages("rpart")
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
dataframeGrados = data.frame(vectorIPC, corteCuantitativo, vectorDeudaPub, vectorPrecioViv, factorComunidades)
myFormula <- corteCuantitativo ~ vectorIPC + vectorDeudaPub + vectorPrecioViv + factorComunidades
arbol_rpart <- rpart(myFormula, method = "class", dataframeGrados)
attributes(arbol_rpart)
print(arbol_rpart)
rpart.plot(arbol_rpart, extra = 4, cex = 0.6, box.palette = "green")
print(arbol_rpart$cptable)
plot(arbol_rpart)
text(arbol_rpart, use.n=T)
printcp(arbol_rpart)
plotcp(arbol_rpart)
table(predict(arbol_rpart))
opt <- which.min(arbol_rpart$cptable[,"xerror"])
cp <- arbol_rpart$cptable[opt, "CP"]
arbol_rpart_prune <- prune(arbol_rpart, cp = cp)
print(arbol_rpart_prune)
plot(arbol_rpart_prune)
text(arbol_rpart_prune, use.n=T)
table(predict(arbol_rpart_prune))
#--------CON SERIES TEMP------------------
vectorIPC <- unlist(ipcPrePred$Indice, use.names = FALSE)
vectorParados <- unlist(paradosPrePred$numParados, use.names = FALSE)
matriz <- cbind(vectorIPC, vectorParados)
serieTemp <- ts(matriz, start = c(2005, 5), frequency = 12)
serieTemp
cor(serieTemp)
#Semilla y division para entrenamiento
set.seed(1)
ind <- sample(2, nrow(matriz), replace=TRUE, prob=c(0.9, 0.1))
head(ind, 10)
# [1] 1 1 1 1 2 1 1 1 1 1
trainData <- matriz[ind==1,] ; dim(trainData)
# [1] 112 5
testData <- matriz[ind==2,] ; dim(testData)
